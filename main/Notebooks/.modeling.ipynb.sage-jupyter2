{"backend_state":"running","connection_file":"/projects/f4382cdc-d929-4012-9815-0c5eb2f78b8d/.local/share/jupyter/runtime/kernel-3695210c-425d-48d0-ae8a-23e5ac58b8f1.json","kernel":"python3-ubuntu","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.2"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1653451864999,"exec_count":1,"id":"06133f","input":"import pandas as pd\nimport numpy as np\nimport importlib\nimport warnings\nimport zipfile\n\nimport make_data\n\nimportlib.reload(make_data)\nwarnings.filterwarnings(\"ignore\")\n\nfrom sklearn.model_selection import train_test_split, GridSearchCV\n\nfrom sklearn.metrics import mean_squared_error\n\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.svm import SVR","kernel":"python3-ubuntu","pos":0,"start":1653451863329,"state":"done","type":"cell"}
{"cell_type":"code","end":1653451995726,"exec_count":3,"id":"0f07f9","input":"zf = zipfile.ZipFile('../Data/all_season.zip')\n\nbat = pd.read_csv(zf.open('all_season/all_season_batting_card.csv'))\nbowl = pd.read_csv(zf.open(\"all_season/all_season_bowling_card.csv\"))\nfull = pd.read_csv(zf.open(\"all_season/all_season_details.csv\"))\n\n# bat = pd.read_csv(\"../Data/all_season_batting_card.csv\")\n# bowl = pd.read_csv(\"../Data/all_season_bowling_card.csv\")\n# full = pd.read_csv(\"../Data/all_season_details.csv\")","kernel":"python3-ubuntu","pos":1,"start":1653451993815,"state":"done","type":"cell"}
{"cell_type":"code","end":1653452009281,"exec_count":4,"id":"a9a76e","input":"df = make_data.make_data(bat, bowl, full)\ndf = df.dropna()\ndf.head()","kernel":"python3-ubuntu","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>match_id</th>\n      <th>batsman1_name</th>\n      <th>bowler1_name</th>\n      <th>home_team</th>\n      <th>away_team</th>\n      <th>current_innings</th>\n      <th>runs</th>\n      <th>ball</th>\n      <th>venue</th>\n      <th>...</th>\n      <th>avg_noballs</th>\n      <th>total_overs</th>\n      <th>total_maidens</th>\n      <th>total_conceded</th>\n      <th>total_wickets</th>\n      <th>total_dots</th>\n      <th>total_fours_c</th>\n      <th>total_sixes_c</th>\n      <th>total_wides</th>\n      <th>total_noballs</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2008</td>\n      <td>335982</td>\n      <td>Ashley Noffke</td>\n      <td>Ajit Agarkar</td>\n      <td>RCB</td>\n      <td>KKR</td>\n      <td>RCB</td>\n      <td>2</td>\n      <td>6</td>\n      <td>M.Chinnaswamy Stadium, Bengaluru</td>\n      <td>...</td>\n      <td>0.047619</td>\n      <td>130.2</td>\n      <td>0</td>\n      <td>1151</td>\n      <td>29</td>\n      <td>273</td>\n      <td>113</td>\n      <td>41</td>\n      <td>36</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>2008</td>\n      <td>335982</td>\n      <td>Balachandra Akhil</td>\n      <td>Ajit Agarkar</td>\n      <td>RCB</td>\n      <td>KKR</td>\n      <td>RCB</td>\n      <td>0</td>\n      <td>2</td>\n      <td>M.Chinnaswamy Stadium, Bengaluru</td>\n      <td>...</td>\n      <td>0.047619</td>\n      <td>130.2</td>\n      <td>0</td>\n      <td>1151</td>\n      <td>29</td>\n      <td>273</td>\n      <td>113</td>\n      <td>41</td>\n      <td>36</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>32</th>\n      <td>2008</td>\n      <td>335982</td>\n      <td>Cameron White</td>\n      <td>Ajit Agarkar</td>\n      <td>RCB</td>\n      <td>KKR</td>\n      <td>RCB</td>\n      <td>3</td>\n      <td>6</td>\n      <td>M.Chinnaswamy Stadium, Bengaluru</td>\n      <td>...</td>\n      <td>0.047619</td>\n      <td>130.2</td>\n      <td>0</td>\n      <td>1151</td>\n      <td>29</td>\n      <td>273</td>\n      <td>113</td>\n      <td>41</td>\n      <td>36</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>48</th>\n      <td>2011</td>\n      <td>501223</td>\n      <td>David Hussey</td>\n      <td>Ajit Agarkar</td>\n      <td>DC</td>\n      <td>KXIP</td>\n      <td>KXIP</td>\n      <td>4</td>\n      <td>2</td>\n      <td>Arun Jaitley Stadium, Delhi</td>\n      <td>...</td>\n      <td>0.047619</td>\n      <td>130.2</td>\n      <td>0</td>\n      <td>1151</td>\n      <td>29</td>\n      <td>273</td>\n      <td>113</td>\n      <td>41</td>\n      <td>36</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>62</th>\n      <td>2008</td>\n      <td>335982</td>\n      <td>Jacques Kallis</td>\n      <td>Ajit Agarkar</td>\n      <td>RCB</td>\n      <td>KKR</td>\n      <td>RCB</td>\n      <td>7</td>\n      <td>4</td>\n      <td>M.Chinnaswamy Stadium, Bengaluru</td>\n      <td>...</td>\n      <td>0.047619</td>\n      <td>130.2</td>\n      <td>0</td>\n      <td>1151</td>\n      <td>29</td>\n      <td>273</td>\n      <td>113</td>\n      <td>41</td>\n      <td>36</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 41 columns</p>\n</div>","text/plain":"    season  match_id      batsman1_name  bowler1_name home_team away_team  \\\n0     2008    335982      Ashley Noffke  Ajit Agarkar       RCB       KKR   \n16    2008    335982  Balachandra Akhil  Ajit Agarkar       RCB       KKR   \n32    2008    335982      Cameron White  Ajit Agarkar       RCB       KKR   \n48    2011    501223       David Hussey  Ajit Agarkar        DC      KXIP   \n62    2008    335982     Jacques Kallis  Ajit Agarkar       RCB       KKR   \n\n   current_innings  runs  ball                             venue  ...  \\\n0              RCB     2     6  M.Chinnaswamy Stadium, Bengaluru  ...   \n16             RCB     0     2  M.Chinnaswamy Stadium, Bengaluru  ...   \n32             RCB     3     6  M.Chinnaswamy Stadium, Bengaluru  ...   \n48            KXIP     4     2       Arun Jaitley Stadium, Delhi  ...   \n62             RCB     7     4  M.Chinnaswamy Stadium, Bengaluru  ...   \n\n   avg_noballs total_overs total_maidens  total_conceded  total_wickets  \\\n0     0.047619       130.2             0            1151             29   \n16    0.047619       130.2             0            1151             29   \n32    0.047619       130.2             0            1151             29   \n48    0.047619       130.2             0            1151             29   \n62    0.047619       130.2             0            1151             29   \n\n    total_dots  total_fours_c  total_sixes_c  total_wides  total_noballs  \n0          273            113             41           36              2  \n16         273            113             41           36              2  \n32         273            113             41           36              2  \n48         273            113             41           36              2  \n62         273            113             41           36              2  \n\n[5 rows x 41 columns]"},"exec_count":4}},"pos":2,"start":1653452004480,"state":"done","type":"cell"}
{"cell_type":"code","end":1653452014357,"exec_count":5,"id":"e356bb","input":"x = df.drop(columns = [\"runs\"])\ny = df[\"runs\"]\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.3)","kernel":"python3-ubuntu","pos":3,"start":1653452014307,"state":"done","type":"cell"}
{"cell_type":"code","end":1653452015047,"exec_count":6,"id":"11fd1a","input":"x_train.shape, x_test.shape","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"((29920, 40), (12824, 40))"},"exec_count":6}},"pos":4,"start":1653452015041,"state":"done","type":"cell"}
{"cell_type":"code","end":1653452016552,"exec_count":7,"id":"3958fe","input":"categorical = x.dtypes[x.dtypes == \"object\"].index.tolist()\nnumerical = x.dtypes[x.dtypes != \"object\"].index.tolist()","kernel":"python3-ubuntu","pos":5,"start":1653452016543,"state":"done","type":"cell"}
{"cell_type":"code","end":1653452017705,"exec_count":8,"id":"00fe1d","input":"num_pl = StandardScaler()\ncat_pl = OneHotEncoder(handle_unknown = \"ignore\")\n\ncol_tr = ColumnTransformer([(\"categorical\", cat_pl, categorical),\n                            (\"numerical\", num_pl, numerical)])\n\nx_train_tr = col_tr.fit_transform(x_train)\nx_test_tr = col_tr.transform(x_test)","kernel":"python3-ubuntu","pos":6,"start":1653452017460,"state":"done","type":"cell"}
{"cell_type":"code","end":1653452024448,"exec_count":9,"id":"59fa60","input":"x_train_tr.shape, x_test_tr.shape","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"((29920, 2113), (12824, 2113))"},"exec_count":9}},"pos":7,"start":1653452024443,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"31cfd7","input":"","pos":12,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":10,"id":"3f3191","input":"lr_params = {\"fit_intercept\": [True, False], \"normalize\": [True, False]}\ndtr_params = {\n    \"max_depth\": [2, 3, 4, 5, 10, 20],\n    \"min_samples_split\": [2, 3, 5, 10, 20],\n    \"min_samples_leaf\": [2, 3, 5, 10, 20],\n}\n\nsvr_params = {\n    'kernel' : ('linear', 'poly', 'sigmoid'),\n    'degree' : [3,8],\n    'coef0' : [0.01,10],\n    'gamma' : ('auto','scale')}\n\nopt_lr = GridSearchCV(LinearRegression(), lr_params)\nopt_lr = opt_lr.fit(x_train_tr, y_train)\n\nopt_dtr = GridSearchCV(DecisionTreeRegressor(), dtr_params)\nopt_dtr = opt_dtr.fit(x_train_tr, y_train)\n\nopt_svr = GridSearchCV(SVR(), svr_params, verbose = 2)\nopt_svr = opt_svr.fit(x_train_tr, y_train)","output":{"0":{"name":"stdout","output_type":"stream","text":"Fitting 5 folds for each of 36 candidates, totalling 180 fits\n"}},"pos":9,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":14,"id":"4c932b","input":"lr_pred = opt_lr.predict(x_test_tr)\ndtr_pred = opt_dtr.predict(x_test_tr)\nsvr_pred = svr.predict(x_test_tr)\n\ndata = {\n    \"mean_sq\": [\n        mean_squared_error(y_test, lin_reg.predict(x_test_tr)),\n        mean_squared_error(y_test, dtr.predict(x_test_tr)),\n        mean_squared_error(y_test, svr.predict(x_test_tr))],\n    \"r2\": [\n        lin_reg.score(x_test_tr, y_test),\n        dtr.score(x_test_tr, y_test),\n        svr.score(x_test_tr, y_test)],\n    \"opt_mean_sq\": [\n        mean_squared_error(y_test, lr_pred),\n        mean_squared_error(y_test, dtr_pred),\n        mean_squared_error(y_test, svr_pred)],\n    \"opt_r2\": [\n        opt_lr.score(x_test_tr, y_test),\n        opt_dtr.score(x_test_tr, y_test),\n        svr.score(x_test_tr, y_test)]\n    \n    }\n\nevaluate_df = pd.DataFrame(data, index = [\"linear regression\", \"decision tree\", \"svr\"])","pos":10,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":15,"id":"65e539","input":"evaluate_df","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mean_sq</th>\n      <th>r2</th>\n      <th>opt_mean_sq</th>\n      <th>opt_r2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>linear regression</th>\n      <td>14.857048</td>\n      <td>0.571418</td>\n      <td>14.857022</td>\n      <td>0.571419</td>\n    </tr>\n    <tr>\n      <th>decision tree</th>\n      <td>28.044682</td>\n      <td>0.190994</td>\n      <td>14.700207</td>\n      <td>0.575942</td>\n    </tr>\n    <tr>\n      <th>svr</th>\n      <td>15.035502</td>\n      <td>0.566270</td>\n      <td>15.035502</td>\n      <td>0.566270</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"                     mean_sq        r2  opt_mean_sq    opt_r2\nlinear regression  14.857048  0.571418    14.857022  0.571419\ndecision tree      28.044682  0.190994    14.700207  0.575942\nsvr                15.035502  0.566270    15.035502  0.566270"},"exec_count":15,"output_type":"execute_result"}},"pos":11,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":9,"id":"fa8fcb","input":"lin_reg = LinearRegression()\nlin_reg = lin_reg.fit(x_train_tr, y_train)\n\ndtr = DecisionTreeRegressor()\ndtr = dtr.fit(x_train_tr, y_train)\n\nsvr = SVR()\nsvr = svr.fit(x_train_tr, y_train)","pos":8,"state":"done","type":"cell"}
{"id":0,"time":1653451817823,"type":"user"}
{"last_load":1653451817906,"type":"file"}